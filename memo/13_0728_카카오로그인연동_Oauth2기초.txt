카카오 개발자 사이트 ,
가입 및 로그인
https://developers.kakao.com/console/app
순서
1 내 애플리케이션 접속
2 앱 추가하기(변경됨)
- 앱이름
- 회사명
- 카테고리 : 나는 교육
- 체크 항목 체크하기.
3 사이드 메뉴 플랫폼 (변경됨)
앱 -> 일반 -> 웹 플랫폼 등록
- 웹 선택.
- http://localhost:8080 등록

4 사이드 보안 메뉴
카카오 로그인 -> 일반 -> 클라이언트 시크릿 메뉴
-secret 코드 생성 하고
키 보관
2Nr92L****************SXp4JzrZu
- 보안 활성화 on

5 사이드 메뉴 카카오 로그인
- 카카오 로그인 활성화
- Redirect URI : 입력
http://localhost:8080/login/oauth2/code/kakao

6 중요, 사이드 메뉴 동의 항목
- 개인정보 동의항목 심사 신청 클릭
- 비즈 앱 전환
- 필수로 수정 클릭 , 이미지 변경
- 카카오 비즈니스 통합 서비스 약관 동의 후
- 카카오 비즈니스 계정 만들기.
- 개인 개발자 전환 클릭.
- 전환 목적 : 이메일 필수 동의

7 사이드 메뉴 동의 화면
필수 체크
이메일, 닉네임, 프로필 이미지
동의 목적 , 교육 테스트

8 사이드 메뉴 앱키
- REST API 키 값 복사하기.
43403e***************5b5fed62

--------------------------------------------------
스프링 도구 설치 및 설정.
9 build.gradle
oauth2-client

// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-oauth2-client
implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client', version: '3.4.0'

10
application.properties 에서 카카오 로그인 API 관련 설정 코드
여기서, 다 샘플코드 이고,
1) 시크릿 코드
2) REST API 키
2가지만 변경

-----------------------------------------------------------
OAuth2 개념 및 정의
**OAuth2(Open Authorization 2.0)**는
인터넷 사용자들이 비밀번호를 제공하지 않고도
다른 웹사이트 상의 자신의 정보에 대해
제3자 애플리케이션의 접근 권한을 부여할 수 있는
개방형 표준 프로토콜(약속, 규칙)입니다.

#카카오 로그인 API 관련 설정
# 역할: 사용자를 카카오 로그인 페이지로 리다이렉트할 때 사용하는 URL
# 동작: 사용자가 로그인 버튼 클릭 시 이 주소로 이동하여 카카오 계정으로 로그인
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize

# 역할: 사용자를 식별하는 고유 속성 지정
# 동작: 카카오에서 제공하는 사용자 정보 중 'id' 필드를 사용자 식별자로 사용
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# 역할: Authorization Code를 Access Token으로 교환할 때 사용하는 URL
# 동작: 카카오 로그인 성공 후 받은 인증 코드를 실제 액세스 토큰으로 교환
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token

# 역할: Access Token을 사용해 사용자 정보를 가져올 때 사용하는 URL
# 동작: 토큰 획득 후 사용자의 프로필 정보를 조회
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me

# 역할: OAuth2 클라이언트의 이름 지정
# 용도: 애플리케이션 내부에서 이 OAuth2 클라이언트를 식별하는 이름
spring.security.oauth2.client.registration.kakao.client-name=kakao

# 역할: OAuth2 인증 방식 지정
#  설명: Authorization Code Grant 방식 사용 (가장 안전하고 표준적인 방식)
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code

# 역할: 카카오 로그인 성공 후 리다이렉트될 우리 애플리케이션의 URL
# 중요: 카카오 개발자 콘솔에 등록한 Redirect URI와 정확히 일치해야 함
spring.security.oauth2.client.registration.kakao.redirect_uri=http://localhost:8080/login/oauth2/code/kakao

# 카카오 개발자 사이트에서, 등록된 키를 사용함.
# REST API 키 값 복붙
spring.security.oauth2.client.registration.kakao.client-id=

# secret 값 복붙
spring.security.oauth2.client.registration.kakao.client-secret=
# post -> client_secret_post : 변경하기
# 역할: 클라이언트 인증 방식 지정
# 설명: client_secret을 POST 요청의 body에 포함하여 전송하는 방식
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post

# 역할: 요청할 사용자 정보의 범위 지정
# 권한 내용:
# profile_nickname: 닉네임
# account_email: 이메일
# profile_image: 프로필 이미지
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email, profile_image
=========================================================================

코드 작업 순서
1
1)CustomSecurityConfig 안의

2) securityFilterChain 메서드

3)
  //카카오 로그인 API 설정
        http.oauth2Login(
                oauthLogin -> oauthLogin.loginPage("/member/login")
        );

2 login.html
카카오 링크 주소 고정, 이미지 공식 개발자 센터에서 다운 받기.
https://developers.kakao.com/tool/resource/login

<a href="/oauth2/authorization/kakao">
    <img th:src="@{/images/login/kakao_login_medium_narrow.png}" alt="카카오 로그인 화면">
</a>
혹시나, 시큐리티로 정적자원 허용 안했다면 허용해주기.
예시
        http.authorizeHttpRequests(
                authorizeRequests -> {
                    authorizeRequests.requestMatchers
                            ("/css/**", "/js/**","/images/**","/member/login","/member/join", "/board/list").permitAll();

3. 동의 화면이 나오고 나서, 시큐리티 타입에 맞게 설정.
시큐리티 원하는 UserDetails 타입으로 반환 해주기 원해요.
그래서, 그 틀 맞춰서 추가 설정.

카카오 로그인 구현 과정.
공식 문서,
https://developers.kakao.com/docs/latest/ko/kakaologin/common


4. 시큐리티 허용 주소 추가
"http://localhost:8080/login/oauth2/code/kakao",
"https://kauth.kakao.com",
"https://kapi.kakao.com"
예시
  http.authorizeHttpRequests(
                authorizeRequests -> {
                    authorizeRequests.requestMatchers
                            ("/css/**", "/js/**","/images/**",
                                    "/member/login","/member/join", "/board/list",
                                    "http://localhost:8080/login/oauth2/code/kakao",
                                    "https://kauth.kakao.com",
                                    "https://kapi.kakao.com").permitAll();

